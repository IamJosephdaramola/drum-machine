{"version":3,"sources":["DrumPad.js","data.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","handleKeydown","e","keyCode","props","letter","charCodeAt","audio","play","currentTime","handleDisplay","id","handleClick","console","log","this","document","addEventListener","window","focus","removeEventListener","className","onClick","src","ref","React","Component","data","App","display","setState","state","map","d","key","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2a66ff73.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass DrumPad extends React.Component {\r\n\tcomponentDidMount() {\r\n\t\tconsole.log(this.audio);\r\n\t\tdocument.addEventListener('keydown', this.handleKeydown);\r\n\t\twindow.focus();\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tdocument.removeEventListener('keydown', this.handleKeydown);\r\n\t}\r\n\r\n\thandleKeydown = e => {\r\n\t\tif (e.keyCode === this.props.letter.charCodeAt()) {\r\n\t\t\tthis.audio.play();\r\n\t\t\tthis.audio.currentTime = 0;\r\n\t\t\tthis.props.handleDisplay(this.props.id);\r\n\t\t}\r\n\t};\r\n\r\n\thandleClick = () => {\r\n\t\tthis.audio.play();\r\n\t\tthis.audio.currentTime = 0;\r\n\t\tthis.props.handleDisplay(this.props.id);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className='drum-pad' id={this.props.id} onClick={this.handleClick}>\r\n\t\t\t\t<h1>{this.props.letter}</h1>\r\n\t\t\t\t<audio\r\n\t\t\t\t\tid={this.props.letter}\r\n\t\t\t\t\tclassName='clip'\r\n\t\t\t\t\tsrc={this.props.src}\r\n\t\t\t\t\tref={ref => (this.audio = ref)}></audio>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default DrumPad;\r\n","const data = [\r\n\t{\r\n\t\tid: 'snare',\r\n\t\tletter: 'Q',\r\n\t\tsrc: 'https://www.myinstants.com/media/sounds/snare.mp3'\r\n\t},\r\n\t{\r\n\t\tid: 'bass 1',\r\n\t\tletter: 'W',\r\n\t\tsrc: 'https://www.myinstants.com/media/sounds/bass-drum.mp3'\r\n\t},\r\n\t{\r\n\t\tid: 'bongo',\r\n\t\tletter: 'E',\r\n\t\tsrc: 'http://tipiwiki.free.fr/snd/Percussion(4e)2.wav'\r\n\t},\r\n\t{\r\n\t\tid: 'tom tom',\r\n\t\tletter: 'A',\r\n\t\tsrc: 'http://www.denhaku.com/r_box/sr16/sr16tom/loelectm.wav'\r\n\t},\r\n\t{\r\n\t\tid: 'bass 3',\r\n\t\tletter: 'S',\r\n\t\tsrc: 'http://billor.chsh.chc.edu.tw/sound/bass4.wav'\r\n\t},\r\n\t{\r\n\t\tid: 'shotgun',\r\n\t\tletter: 'D',\r\n\t\tsrc: 'http://david.guerrero.free.fr/Effects/ShotgunReload.wav'\r\n\t},\r\n\t{\r\n\t\tid: 'high hat',\r\n\t\tletter: 'Z',\r\n\t\tsrc: 'http://www.denhaku.com/r_box/tr707/closed.wav'\r\n\t},\r\n\t{\r\n\t\tid: 'drum hit',\r\n\t\tletter: 'X',\r\n\t\tsrc: 'http://www.masterbits.de/sc_docu/sounds1/1TM00013.MP3'\r\n\t},\r\n\t{\r\n\t\tid: 'laser',\r\n\t\tletter: 'C',\r\n\t\tsrc: 'http://www.sa-matra.net/sounds/starcontrol/Umgah-Backzip.wav'\r\n\t}\r\n];\r\n\r\nexport default data;\r\n","import React from 'react';\nimport './App.css';\nimport DrumPad from './DrumPad';\nimport data from './data';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdisplay: 'Click or Press a Key'\n\t\t};\n\t}\n\n\thandleDisplay = display => this.setState({ display });\n\n\trender() {\n\t\treturn (\n\t\t\t<div id='drum-machine' className='container'>\n\t\t\t\t<div id='display'>{this.state.display}</div>\n\t\t\t\t<div id='drum-pads'>\n\t\t\t\t\t{data.map(d => (\n\t\t\t\t\t\t<DrumPad\n\t\t\t\t\t\t\tkey={d.id}\n\t\t\t\t\t\t\tid={d.id}\n\t\t\t\t\t\t\tletter={d.letter}\n\t\t\t\t\t\t\tsrc={d.src}\n\t\t\t\t\t\t\thandleDisplay={this.handleDisplay}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}